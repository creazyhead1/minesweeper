import pygame
import random
import os

# --- INITIAL SETTINGS ---
window_width = 800
window_height = 700

# Center the window on screen
os.environ['SDL_VIDEO_CENTERED'] = '1'

# Colors used in the game
background_color = (50, 50, 200)
grid_color = (180, 180, 180)
text_color = (0, 0, 0)
revealed_color = (220, 220, 220)
border_color = (30, 30, 150)
shadow_color = (0, 0, 0, 100)
button_color = (200, 200, 200)
button_hover_color = (170, 170, 170)

# Initialize Pygame and create the main window
pygame.init()
screen = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("Minesweeper")
font = pygame.font.SysFont('Arial', 24)

# Main game matrices
board = []
visible = []
flags = []

# Game state (start, difficulty, game)
game_state = "start"

# Difficulty settings
difficulties = {
    "Easy": {"rows": 8, "cols": 8, "mines": 10, "cell_size": 30},
    "Medium": {"rows": 16, "cols": 16, "mines": 40, "cell_size": 30},
    "Hard": {"rows": 24, "cols": 24, "mines": 99, "cell_size": 23}
}

# Global variables
rows, cols, mines = 0, 0, 0
cell_size = 30
board_width, board_height = 0, 0
offset_x, offset_y = 0, 0
game_over, victory = False, False
start_time = 0
elapsed_time = 0

# --- HELPER FUNCTIONS ---
def draw_button(text, x, y, width, height, bg_color, fg_color):
    """Draws a button and returns its rect for click detection"""
    mouse_pos = pygame.mouse.get_pos()
    button_rect = pygame.Rect(x, y, width, height)
    current_color = button_hover_color if button_rect.collidepoint(mouse_pos) else bg_color
    pygame.draw.rect(screen, current_color, button_rect)
    pygame.draw.rect(screen, (0, 0, 0), button_rect, 2)
    text_render = font.render(text, True, fg_color)
    text_rect = text_render.get_rect(center=button_rect.center)
    screen.blit(text_render, text_rect)
    return button_rect

def generate_board():
    """Generates the game board with mines and numbers"""
    global board
    board = [[0 for _ in range(cols)] for _ in range(rows)]
    placed = 0
    while placed < mines:
        x = random.randint(0, cols - 1)
        y = random.randint(0, rows - 1)
        if board[y][x] != "M":
            board[y][x] = "M"
            placed += 1
    for y in range(rows):
        for x in range(cols):
            if board[y][x] == "M":
                continue
            count = sum(
                1 for dy in [-1, 0, 1] for dx in [-1, 0, 1]
                if 0 <= y+dy < rows and 0 <= x+dx < cols and board[y+dy][x+dx] == "M"
            )
            board[y][x] = count

def init_game():
    """Initializes game variables and generates board"""
    global visible, flags, board_width, board_height, offset_x, offset_y
    global start_time, elapsed_time
    global game_over, victory
    start_time = pygame.time.get_ticks()
    elapsed_time = 0
    board_width = cols * cell_size
    board_height = rows * cell_size
    offset_x = (window_width - board_width) // 2
    offset_y = (window_height - board_height) // 2 + 40
    visible = [[False]*cols for _ in range(rows)]
    flags = [[False]*cols for _ in range(rows)]
    game_over = False
    victory = False
    generate_board()

def reveal_zeros(y, x):
    """Reveals empty cells recursively"""
    if not (0 <= y < rows and 0 <= x < cols) or visible[y][x] or flags[y][x]:
        return
    visible[y][x] = True
    if board[y][x] == 0:
        for dy in [-1, 0, 1]:
            for dx in [-1, 0, 1]:
                if dx != 0 or dy != 0:
                    reveal_zeros(y + dy, x + dx)

def check_victory():
    """Checks if player won"""
    return all(
        board[y][x] == "M" or visible[y][x]
        for y in range(rows) for x in range(cols)
    )

def count_flags():
    """Counts the number of placed flags"""
    return sum(flags[y][x] for y in range(rows) for x in range(cols))

def restart_game():
    """Restarts game with same difficulty"""
    init_game()

# --- MAIN GAME LOOP ---
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mx, my = pygame.mouse.get_pos()

            if game_state == "start":
                if draw_button("START", window_width//2 - 100, window_height//2 - 25, 200, 50, button_color, text_color).collidepoint(mx, my):
                    game_state = "difficulty"

            elif game_state == "difficulty":
                for i, name in enumerate(["Easy", "Medium", "Hard"]):
                    if draw_button(name, window_width//2 - 100, window_height//2 - 90 + i*70, 200, 50, button_color, text_color).collidepoint(mx, my):
                        d = difficulties[name]
                        rows, cols, mines = d["rows"], d["cols"], d["mines"]
                        cell_size = d["cell_size"]
                        init_game()
                        game_state = "game"

            elif game_state == "game":
                btn_width = 100
                btn_height = 30
                gap = 10

                menu_btn_x = window_width - btn_width - 20
                menu_btn_y = 20
                restart_btn_x = menu_btn_x
                restart_btn_y = menu_btn_y + btn_height + gap

                if restart_btn_x <= mx <= restart_btn_x + btn_width and restart_btn_y <= my <= restart_btn_y + btn_height:
                    restart_game()
                elif menu_btn_x <= mx <= menu_btn_x + btn_width and menu_btn_y <= my <= menu_btn_y + btn_height:
                    game_state = "difficulty"
                elif not game_over:
                    cx = (mx - offset_x) // cell_size
                    cy = (my - offset_y) // cell_size
                    if 0 <= cx < cols and 0 <= cy < rows:
                        if event.button == 1 and not flags[cy][cx]:  # Left click
                            if board[cy][cx] == "M":
                                visible[cy][cx] = True
                                game_over = True
                                for y in range(rows):
                                    for x in range(cols):
                                        if board[y][x] == "M":
                                            visible[y][x] = True
                            elif board[cy][cx] == 0:
                                reveal_zeros(cy, cx)
                            else:
                                visible[cy][cx] = True
                            if check_victory():
                                victory = True
                                game_over = True
                        elif event.button == 3 and not visible[cy][cx]:  # Right click
                            flags[cy][cx] = not flags[cy][cx]

    # --- RENDERING ---
    screen.fill(background_color)

    if game_state == "start":
        draw_button("START", window_width//2 - 100, window_height//2 - 25, 200, 50, button_color, text_color)

    elif game_state == "difficulty":
        for i, name in enumerate(["Easy", "Medium", "Hard"]):
            draw_button(name, window_width//2 - 100, window_height//2 - 90 + i*70, 200, 50, button_color, text_color)

    elif game_state == "game":
        for y in range(rows):
            for x in range(cols):
                rect = pygame.Rect(offset_x + x*cell_size, offset_y + y*cell_size, cell_size, cell_size)
                pygame.draw.rect(screen, border_color, rect)

                if visible[y][x]:
                    pygame.draw.rect(screen, revealed_color, rect.inflate(-2, -2))
                    if board[y][x] == "M":
                        pygame.draw.circle(screen, (255, 0, 0), rect.center, cell_size//3)
                    elif board[y][x] > 0:
                        cell_text = font.render(str(board[y][x]), True, text_color)
                        text_rect = cell_text.get_rect(center=rect.center)
                        screen.blit(cell_text, text_rect)
                else:
                    pygame.draw.rect(screen, grid_color, rect.inflate(-2, -2))
                    if flags[y][x]:
                        pygame.draw.line(screen, (255, 0, 0), (rect.left + 6, rect.top + 6), 
                                         (rect.right - 6, rect.bottom - 6), 3)
                        pygame.draw.line(screen, (255, 0, 0), (rect.right - 6, rect.top + 6), 
                                         (rect.left + 6, rect.bottom - 6), 3)

        if not game_over:
            elapsed_time = (pygame.time.get_ticks() - start_time) // 1000

        time_text = font.render(f"Time: {elapsed_time}s", True, (255, 255, 255))
        screen.blit(time_text, (10, 10))

        remaining_flags = mines - count_flags()
        flags_text = font.render(f"Mines: {remaining_flags}", True, (255, 255, 255))
        screen.blit(flags_text, (10, 40))

        btn_width = 100
        btn_height = 30
        gap = 10

        menu_btn_x = window_width - btn_width - 20
        menu_btn_y = 20
        restart_btn_x = menu_btn_x
        restart_btn_y = menu_btn_y + btn_height + gap

        draw_button("Menu", menu_btn_x, menu_btn_y, btn_width, btn_height, button_color, text_color)
        draw_button("Restart", restart_btn_x, restart_btn_y, btn_width, btn_height, button_color, text_color)

        if game_over:
            message = "You won!" if victory else "You lost!"
            message_text = font.render(message, True, (255, 255, 255))
            message_rect = message_text.get_rect(center=(window_width//2, 40))
            screen.blit(message_text, message_rect)

    pygame.display.update()

pygame.quit()
